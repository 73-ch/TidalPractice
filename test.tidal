

import Sound.Tidal.OscStream


let p5Shape = dirt {cpsStamp = False, latency = 0.4}
    p5Slang = superDirtSlang {timestamp = NoStamp,
                              preamble = []
                             }
    p5Stream = do
      s <- makeConnection "127.0.0.1" 1818 p5Slang
      stream (Backend s $ (\_ _ _ -> return ())) p5Shape
    (scene, _) = pS "scene" Nothing
    combinedStream = do p5 <- p5Stream
                        ds <- superDirtState 57120
                        let d = setter ds
                        return $ \p -> do p5 p
                                          d p

x1 <- combinedStream

let hush = mapM_ ($ silence) [d1,d2,d3,d4,d5,d6,d7,d8,d9,x1]

let solo = (>>) hush


do
  {
    let p5Shape = dirt {cpsStamp = False, latency = 0.4};
        p5Slang = superDirtSlang {timestamp = NoStamp,
                                  preamble = []
                                };
        p5Stream = do {
          s <- makeConnection "127.0.0.1" 1818 p5Slang
          stream (Backend s $ (\_ _ _ -> return ())) p5Shape
        };
        (scene, _) = pS "scene" Nothing
        combinedStream = do p5 <- p5Stream
                            ds <- superDirtState 57120
                            let d = setter ds
                            return $ \p -> do p5 p
                                              d p
    x1 <- combinedStream;
        let hush = mapM_ ($ silence) [d1,d2,d3,d4,d5,d6,d7,d8,d9,x1];
        let solo = (>>) hush;
  }

d1  $sound "bd*4"
 # room "0.9"


d1 $ every 3 (fast 2) $
  stack [
    sound "[bd(5, 8, [1 3 2 7]/4), cp(5, 8, [2 5]/2)]"
    -- sound "bd"
  ]
  # pan "5.0 2.0 1.0 -1.0"
  # speed 2
  # gain (run 10)

d1 $ sound "bd"

hush
